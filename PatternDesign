Design pattern (tasarÄ±m deseni), yazÄ±lÄ±m geliÅŸtirme sÄ±rasÄ±nda karÅŸÄ±laÅŸÄ±lan yaygÄ±n problemler iÃ§in yeniden kullanÄ±labilir, genel Ã§Ã¶zÃ¼mler sunan ÅŸablonlardÄ±r.
Bu desenler, kodun daha anlaÅŸÄ±lÄ±r, bakÄ±mÄ± kolay ve yeniden kullanÄ±labilir olmasÄ±nÄ± saÄŸlar.

ğŸ”· 1. Creational Patterns (YaratÄ±msal Desenler)
AmaÃ§: Nesnelerin oluÅŸturulma sÃ¼recini kontrol etmek.

Singleton â€“ Sadece tek bir Ã¶rneÄŸi olan sÄ±nÄ±f saÄŸlar.

Factory Method â€“ Alt sÄ±nÄ±flarÄ±n hangi nesneyi oluÅŸturacaÄŸÄ±na karar vermesini saÄŸlar.

Abstract Factory â€“ Ä°lgili nesne ailelerini oluÅŸturur, alt sÄ±nÄ±flarÄ± belirtmeden.

Builder â€“ KarmaÅŸÄ±k nesneleri adÄ±m adÄ±m oluÅŸturur.

Prototype â€“ Var olan nesneden klonlama ile yeni nesne oluÅŸturur.

ğŸ”· 2. Structural Patterns (YapÄ±sal Desenler)
AmaÃ§: SÄ±nÄ±flar ve nesneler arasÄ±nda bÃ¼yÃ¼k yapÄ±lar kurmak.

Adapter â€“ Uyumsuz arayÃ¼zleri birbirine uyumlu hale getirir.

Bridge â€“ Soyutlama ile implementasyonu birbirinden ayÄ±rÄ±r.

Composite â€“ Nesne gruplarÄ±nÄ± tek bir nesne gibi iÅŸler (aÄŸaÃ§ yapÄ±sÄ± gibi).

Decorator â€“ Nesneye dinamik olarak yeni davranÄ±ÅŸlar ekler.

Facade â€“ KarmaÅŸÄ±k alt sistemlere basit bir arayÃ¼z saÄŸlar.

Flyweight â€“ Ã‡ok sayÄ±da nesneyi verimli ÅŸekilde yÃ¶netmek iÃ§in paylaÅŸÄ±m yapar.

Proxy â€“ BaÅŸka bir nesneye eriÅŸimi kontrol eden vekil nesne saÄŸlar.

ğŸ”· 3. Behavioral Patterns (DavranÄ±ÅŸsal Desenler)
AmaÃ§: Nesneler arasÄ± iletiÅŸim ve sorumluluk paylaÅŸÄ±mÄ±nÄ± dÃ¼zenlemek.

Chain of Responsibility â€“ Talep, zincir Ã¼zerindeki nesnelere sÄ±rayla iletilir.

Command â€“ Bir isteÄŸi nesne olarak kapsÃ¼ller.

Interpreter â€“ Bir dilin gramerini temsil eder ve yorumlar.

Iterator â€“ Bir koleksiyondaki Ã¶ÄŸelere sÄ±rayla eriÅŸim saÄŸlar.

Mediator â€“ Nesneler arasÄ±ndaki iletiÅŸimi merkezi bir yapÄ± aracÄ±lÄ±ÄŸÄ±yla yapar.

Memento â€“ Nesnenin Ã¶nceki durumunu kaydeder ve geri alÄ±r.

Observer â€“ Bir nesne deÄŸiÅŸince baÄŸlÄ± olanlarÄ± otomatik bilgilendirir.

State â€“ Nesnenin iÃ§ durumu deÄŸiÅŸtikÃ§e davranÄ±ÅŸÄ±nÄ± deÄŸiÅŸtirir.

Strategy â€“ Bir algoritmanÄ±n ailesini tanÄ±mlar ve deÄŸiÅŸtirilebilir hale getirir.

Template Method â€“ Ä°ÅŸlem sÄ±rasÄ±nÄ± belirler, alt sÄ±nÄ±flar bazÄ± adÄ±mlarÄ± Ã¶zelleÅŸtirir.

Visitor â€“ Nesne yapÄ±sÄ±nda gezinerek, her elemana iÅŸlem uygulamak iÃ§in kullanÄ±lÄ±r.
